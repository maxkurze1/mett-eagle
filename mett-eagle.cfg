-- vim:ft=lua
local L4 = require("L4")
local log_level = {
  DEBUG = 0x1F,
  INFO  = 0xF,
  WARN  = 0x7,
  ERROR = 0x3,
  FATAL = 0x1,
  NONE  = 0x0,
}

local l = L4.default_loader

-- creating initial capability for manager and client to
-- talk to each other
local channel = l:new_channel()

-- only for debugging purposes
-- TODO is there a Semaphore:up() for lua??
local log_sync = L4.Env.factory:create(L4.Proto.Semaphore)

-- should be the same a in l4sys consts.h
local L4_SCHED_MIN_PRIO = 0
local L4_SCHED_MAX_PRIO = 255

-- TODO does this make problems with moe?? e.g. on region map deletion
-- local log = L4.Env.user_factory:create(L4.Proto.Log, "", 0)
local log = L4.Env.log -- pass the default log (no color or prefix)


-- configure DVFS using the cpufreq binary
print("Setting DVFS")
local cpufreq_task = l:startv({caps = { dvfs = L4.Env.dvfs }}, "rom/cpufreq", "-g", "performance")
-- wait to ensure it is set
cpufreq_task:wait()

-- the mett eagle server
print("Starting MettEagle")
l:start({
    caps = {
        server = channel:svr(),
        log_sync = log_sync:m("s"),
        rom = L4.Env.rom, -- also mapped by default
        jdb = L4.Env.jdb,
    },
    log = log,
    scheduler = L4.Env.user_factory:create(L4.Proto.Scheduler, L4_SCHED_MAX_PRIO, L4_SCHED_MIN_PRIO, 0xFFFFFFFFFFFFFFFF), -- pass all 64 cores to the manager
}, "rom/mett-eagle",
{
    PKGNAME="Mett-Eagle",
    LOG_LEVEL = log_level.FATAL, -- only print fatal messages (to prevent timeout spam)
})


--[[
    This will create a restricted namespace that will only contain
    the necessary entries for the client to work.
]]

local restricted_ns_entries =
{
    "mett-eagle-client", -- client binary itself
    "function1.py",      -- python benchmark function
    "function1",         -- c++    benchmark function
}

local restricted_ns = L4.Env.user_factory:create(L4.Proto.Namespace)
for _,val in pairs(restricted_ns_entries) do
    restricted_ns:register(val, L4.Env.rom:query(val))
end


--[[
    passing CLIENT_ARGS env variable as invocations parameters (argc,argv)
    to the client

    see modules.list (passing CLIENT_ARGS to moe, which in turn passes them to ned)
    see client.cc for possible arguments (or call with --help)

    passed by 
    `CLIENT_ARGS="..." make qemu ...`
--]]
-- throw away filename of this config
arg[0] = nil;
local client_args = arg
-- append environment to the array for unpack to work
-- (startv expects a table for the environment variables as the last argument)
---@diagnostic disable-next-line: assign-type-mismatch
client_args[#client_args+1] = {
    PKGNAME = "  Client  ",
    LOG_LEVEL = log_level.DEBUG,
}

--[[
    TODO what about regulating the client memory and forcing the client
    to pass its own mem allocator to provide for the workers??
    
    mem = L4.Env.user_factory:create(L4.Proto.Factory, 1024*1024)
]]
l:startv({
    caps = {
        manager = channel,
        log_sync = log_sync:m("s"),
        rom = restricted_ns, -- preventing ned from passing the default L4.Env.rom
        jdb = L4.Env.jdb,
        scheduler = L4.Env.user_factory:create(L4.Proto.Scheduler, L4_SCHED_MAX_PRIO, L4_SCHED_MIN_PRIO, 0x1), -- pass only one core to the client
    },
    log = log,
}, "rom/mett-eagle-client", table.unpack(client_args))