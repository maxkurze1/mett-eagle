-- vim:ft=lua
local L4 = require("L4")
local log_level = {
  DEBUG = 0x1F,
  INFO  = 0xF,
  WARN  = 0x7,
  ERROR = 0x3,
  FATAL = 0x1,
  NONE  = 0x0,
}

local l = L4.default_loader

--[[
    creating initial capability for manager and client to
    talk to each other
]]
local channel = l:new_channel()

-- only for debugging purposes
-- TODO is there a Semaphore:up() for lua??
local log_sync = L4.Env.factory:create(L4.Proto.Semaphore)

-- should be the same a in l4sys consts.h
local L4_SCHED_MIN_PRIO = 0
local L4_SCHED_MAX_PRIO = 255

-- TODO does this make problems with moe?? e.g. on region map deletion
-- local log = L4.Env.user_factory:create(L4.Proto.Log, "", 0)
local log = L4.Env.log

l:start({
    caps = {
        server = channel:svr(),
        log_sync = log_sync:m("s"),
        rom = L4.Env.rom, -- also mapped by default
        jdb = L4.Env.jdb,
    },
    log = log, --L4.Env.log, -- start without log color or prefix
    -- 0xFFFFFFFFFFFFFFFF
    scheduler = L4.Env.user_factory:create(L4.Proto.Scheduler, L4_SCHED_MAX_PRIO, L4_SCHED_MIN_PRIO, 0xFFE), -- pass all 64 cores to the manager
}, "rom/mett-eagle",
{
    PKGNAME="Mett-Eagle",
    LOG_LEVEL = log_level.DEBUG,
})

--[[
    This will create a restricted namespace that will only contain
    function1 and mett-eagle-client. Those 2 are necessary for the
    client to work.
]]

local restricted_ns = L4.Env.user_factory:create(L4.Proto.Namespace)
restricted_ns:register("function1", L4.Env.rom:query("function1"))
restricted_ns:register("function11", L4.Env.rom:query("function11"))
restricted_ns:register("mett-eagle-client", L4.Env.rom:query("mett-eagle-client"))

--[[
    TODO what about regulating the client memory and forcing the client
    to pass its own mem allocator to provide for the workers??
    
    mem = L4.Env.user_factory:create(L4.Proto.Factory, 1024*1024)
]]

l:start({
    caps = {
        manager = channel,
        log_sync = log_sync:m("s"),
        rom = restricted_ns, -- preventing ned from passing the default L4.Env.rom
        jdb = L4.Env.jdb,
        scheduler = L4.Env.user_factory:create(L4.Proto.Scheduler, L4_SCHED_MAX_PRIO, L4_SCHED_MIN_PRIO, 0x1),
    },
    log = log, --L4.Env.log, -- start without log color or prefix
}, "rom/mett-eagle-client",
{
    PKGNAME = "  Client  ",
    LOG_LEVEL = log_level.DEBUG,
})

-- local l = L4.Loader.new({mem = L4.Env.user_factory:create(L4.Proto.Factory, 1024*1024):svr()})
-- l:start({
--     caps = {
--     },
--     log = L4.Env.log, -- start without log color or prefix
--     -- mem = L4.Env.user_factory:create(L4.Proto.Factory, 1024*1024)
-- }, "rom/python-faas",
-- {
--     PKGNAME = "Worker    ",
--     LOG_LEVEL = log_level.DEBUG
-- })

-- run python with test programm
-- l:start({
--     caps = {
--     },
--     log = L4.Env.log, -- start without log color or prefix
--     -- mem = L4.Env.user_factory:create(L4.Proto.Factory, 1024*1024)
-- }, "rom/python","rom/test.py")