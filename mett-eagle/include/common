// -*- Mode: C++ -*-
// vim:ft=cpp
/**
 * (c) 2023 Max Kurze <max.kurze@mailbox.tu-dresden.de>
 *
 * This file is distributed under the terms of the
 * GNU General Public License 2.
 * Please see the LICENSE.md file for details.
 */
/**
 * @file
 * Some common declarations that are shared by the interface definitions.
 *
 * @headerfile <l4/mett-eagle/common>
 */

#pragma once

#include <chrono>
#include <l4/sys/cxx/ipc_iface>
#include <l4/sys/types.h>

namespace L4Re
{
namespace MettEagle
{

/* client and worker cannot use the same protocol value as base *
 * because they are derived from base.                          */
enum Protocol
{
  // clang-format off
  PROTO_MANAGER_BASE     = 0x5000,
  PROTO_MANAGER_CLIENT   = 0x5001,
  PROTO_MANAGER_WORKER   = 0x5002,
  PROTO_MANAGER_REGISTRY = 0x5003,
  // clang-format on
};

/**
 * RPC attribute for a timeout RPC.
 *
 * This class can be used as FLAGS parameter to L4::Ipc::Msg::Rpc_call and
 * L4::Ipc::Msg::Rpc_inline_call templates.
 *
 * This flag accepts a send and a receive timeout parameter. Both need to be in
 * microseconds and will default to NEVER.
 *
 * Note: use L4_TIMEOUT_US_NEVER instead of L4_IPC_NEVER
 * Note: L4_TIMEOUT_US_MAX holds the longest possible waiting period in
 *       microseconds
 *
 * Examples:
 * ~~~~~~~~~~~{.cpp}
 * L4_RPC(long, send, (unsigned value),
 * L4Re::MettEagle::Call_timeout<L4_TIMEOUT_US_NEVER, 1000>);
 * ~~~~~~~~~~~
 */
template <l4_uint32_t SEND_TIMEOUT_US = L4_TIMEOUT_US_NEVER,
          l4_uint32_t RECEIVE_TIMEOUT_US = L4_TIMEOUT_US_NEVER>
struct Call_timeout : L4::Ipc::Call
{
  static l4_timeout_t
  timeout ()
  {
    return l4_timeout_t{ .p{ .rcv = l4_timeout_from_us (RECEIVE_TIMEOUT_US),
                             .snd = l4_timeout_from_us (SEND_TIMEOUT_US) } };
  }
};

} // namespace MettEagle
} // namespace L4