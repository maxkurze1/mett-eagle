// -*- Mode: C++ -*-
// vim:ft=cpp
/**
 * (c) 2023 Max Kurze <max.kurze@mailbox.tu-dresden.de>
 *
 * This file is distributed under the terms of the
 * GNU General Public License 2.
 * Please see the COPYING-GPL-2 file for details.
 */
/**
 * @file
 * The mett-eagle worker interface.
 *
 * This interface will by used by the manager to answer workers.
 *
 * @headerfile <l4/mett-eagle/client>
 */

#pragma once

#include <l4/sys/capability>
#include <l4/sys/cxx/ipc_iface>

namespace L4Re
{

namespace MettEagle
{

/**
 * @brief Interface provided by the client to the manager
 *
 * This is the interface that a worker need to implement to
 * receive messages from the manager. It will be used by the
 * manager to inform the worker e.g. if an action is done.
 *
 * An initial capability slot will be reserved for this 
 * interface.
 */
struct Worker : L4::Kobject_t<Client, L4::Kobject>
{
  /**
   * @brief Answer of a serverless function.
   *
   * @return L4_EOK on success or a negative error value
   *
   * TODO server shouldn't block if client is not ready!!
   */
  L4_INLINE_RPC (l4_msgtag_t, answer, (L4::Ipc::String<> name));

  typedef L4::Typeid::Rpcs<answer_t> Rpcs;
};

} // namespace MettEagle

} // namespace L4Re