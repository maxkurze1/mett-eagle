// -*- Mode: C++ -*-
// vim:ft=cpp
/**
 * (c) 2023 Max Kurze <max.kurze@mailbox.tu-dresden.de>
 *
 * This file is distributed under the terms of the
 * GNU General Public License 2.
 * Please see the LICENSE.md file for details.
 */
/**
 * @file
 * Some utility methods for usage by clients.
 *
 * @headerfile <l4/mett-eagle/util>
 */

#include <l4/mett-eagle/client>
#include <l4/mett-eagle/registry>

#include <l4/re/util/cap_alloc>
#include <l4/re/error_helper>
#include <l4/re/util/env_ns>

namespace L4Re
{
namespace MettEagle
{

/**
 * @brief Get the Manager capability as client
 *
 * This method can be invoked by the client to register itself and get the
 * capability that can be used to talk to the MettEagle manager.
 *
 * @param cap_name            Name of the capability from the
 *                            MettEagle::ManagerRegistry this must be created
 *                            by ned on startup
 * @return MettEagle::Manager Capability to a Manager Ipc_Gate
 */
inline static L4::Cap<L4Re::MettEagle::Manager_Client>
getManager (const char *const cap_name) // TODO support custom cap_alloc
{
  /* get the initial ipc gate of the MettEagle manager to register ourselves */
  auto manager_registry = L4Re::chkcap (
      L4Re::Env::env ()->get_cap<MettEagle::Manager_Registry> (cap_name),
      "Couldn't get manager_registry capability");
  /* cap to receive new ipc gate from manager */
  auto manager_cap = L4Re::chkcap (
      L4Re::Util::cap_alloc.alloc<MettEagle::Manager_Client> (),
      "allocate manager capability");
  /* register ipc call, see MettEagle::Manager_Registry */
  L4Re::chksys (manager_registry->register_client (manager_cap),
                "register_client");
  return manager_cap;
}

} // namespace MettEagle
} // namespace L4Re
