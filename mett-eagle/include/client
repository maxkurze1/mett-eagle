// -*- Mode: C++ -*-
// vim:ft=cpp
/**
 * (c) 2023 Max Kurze <max.kurze@mailbox.tu-dresden.de>
 *
 * This file is distributed under the terms of the
 * GNU General Public License 2.
 * Please see the LICENSE.md file for details.
 */
/**
 * @file
 * The mett-eagle client interfaces.
 *
 * @headerfile <l4/mett-eagle/client>
 */

#pragma once

#include <l4/mett-eagle/base>
#include <l4/mett-eagle/common>

#include <l4/re/dataspace>
#include <l4/re/error_helper>
#include <l4/re/util/env_ns>

#include <l4/sys/capability>
#include <l4/sys/cxx/ipc_basics>
#include <l4/sys/cxx/ipc_iface>
#include <l4/sys/cxx/ipc_types>

#include <l4/fmt/core.h>
#include <l4/liblog/log>
#include <l4/liblog/loggable-exception>

#include <string>

namespace L4Re
{
namespace MettEagle
{

/**
 * @brief Interface provided to clients
 *
 * This interface will provide additional functionality only available to
 * clients.
 *
 * @note The clients will receive this interface via the manager registry.
 *
 * @see Manager_Base the inherited base interface
 */
struct Manager_Client
    : L4::Kobject_t<Manager_Client, Manager_Base, PROTO_MANAGER_CLIENT,
                    L4::Type_info::Demand_t<1> >
// It is necessary to declare the Demand_t<1> to receive the file capabilities.
// Tt is also necessary to use the Br_manager to allocate the needed receive
// capability
{
  /**
   * @brief Create a new 'action' (= faas function)
   *
   * This will create a new action with the contents of a file.
   *
   * @param[in] name  Name that will identify the action
   * @param[in] file  Dataspace capability representing the binary file
   *
   * @return          L4_EOK on success
   * @return          -L4_EINVAL if no capability was received
   * @return          -L4_ENOMEM if no server ipc gate could be allocated
   * @return          -L4_EEXIST if name is already in use
   */
  l4_msgtag_t
  action_create (L4::Ipc::String<> name, L4::Ipc::Cap<L4Re::Dataspace> file)
  {
    return action_create_t::call (c (), name, file);
  }

  /**
   * @brief Create a new 'action' (= faas function)
   *
   * Utility wrapper to search for the given file name inside the L4Re::Env_ns
   * This will be called by the client, therefore the environment of the
   * client will be search and only the client needs to have access to the
   * file.
   *
   * @param[in] name            Name of the action
   * @param[in] pathname        L4Re::Env_ns name of the file
   *
   * @throws L4Re::LibLog::Loggable_exception  if file 'pathname' couldn't be
   * found
   *
   * @return          L4_EOK on success
   * @return          -L4_EINVAL if no capability was received
   * @return          -L4_ENOMEM if no server ipc gate could be allocated
   * @return          -L4_EEXIST if name is already in use
   */
  l4_msgtag_t
  action_create (L4::Ipc::String<> name, const char *const pathname)
  {
    auto file = L4Re::Util::Env_ns{}.query<L4Re::Dataspace> (pathname);
    if (L4_UNLIKELY (not file.is_valid ()))
      throw LibLog::Loggable_exception (-L4_EINVAL,
                                        "Couldn't find file '{:s}'", pathname);
    return action_create_t::call (c (), name, file);
  }

  L4_INLINE_RPC_NF (l4_msgtag_t, action_create,
                    (L4::Ipc::String<> name,
                     L4::Ipc::Cap<L4Re::Dataspace> file));

  typedef L4::Typeid::Rpcs<action_create_t> Rpcs;
};

} // namespace MettEagle
} // namespace L4