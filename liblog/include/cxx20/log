// -*- Mode: C++ -*-
// vim:ft=cpp
/**
 * (c) 2023 Max Kurze <max.kurze@mailbox.tu-dresden.de>
 *
 * This file is distributed under the terms of the
 * GNU General Public License 2.
 * Please see the COPYING-GPL-2 file for details.
 */
/**
 * @file
 * This library provides the same functionality as <l4/liblob/log>, but with a
 * nicer interface. It uses the c++20 std::source_location to avoid
 * preprocessor macros.
 *
 * @headerfile {l4/liblog/cxx20/log}
 * 
 * @note This interface is still WIP
 */

#pragma once

#if __cplusplus > 201703L && __has_builtin(__builtin_source_location)

#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <iostream>
#include <l4/cxx/exceptions>
#include <source_location>
#include <string>

namespace L4Re
{

namespace LibLog
{

class Log
{
public:
  /**
   * @brief The output level of the Log
   *
   * This level will control which log messages are written
   * to the ouput and which will silently return.
   * Note: the default Level will be INFO
   *
   * A level will by default also activate all higher levels.
   * the versions prefixed with _ONLY can be used to construct
   * a specific combination.
   *
   * For example:
   * @code{.cpp}
   * L4Re::LibLog::setLevel(L4Re::LibLog::Level::DEBUG_ONLY |
   *   L4Re::LibLog::Level::ERROR_ONLY)
   * @endcode
   *
   * will only output debug and error messages.
   */
  class Level
  {
  public:
    /**
     * This variable hold the actual level value
     */
    l4_uint8_t value;

    /**
     * @brief Construct from a given enum value
     */
    Level (l4_uint8_t v) : value (v){};

    /**
     * @brief Construct from the LOG_LEVEL environment
     *
     * Will try to initialize with the value of the LOG_LEVEL
     * environment variable or default to 'INFO' if it is not set.
     */
    Level ()
    {
      const char *const level = getenv ("LOG_LEVEL");
      if (level == NULL)
        {
          value = INFO;
          return;
        }

      if (strcasecmp (level, "DEBUG") == 0)
        value = DEBUG;
      else if (strcasecmp (level, "INFO") == 0)
        value = INFO;
      else if (strcasecmp (level, "WARN") == 0)
        value = WARN;
      else if (strcasecmp (level, "ERROR") == 0)
        value = ERROR;
      else if (strcasecmp (level, "FATAL") == 0)
        value = FATAL;
      else
        value = INFO;
    }

    // clang-format off
    enum : l4_uint8_t
    {
      DEBUG =      0b11111,
      INFO  =      0b01111,
      WARN  =      0b00111,
      ERROR =      0b00011,
      FATAL =      0b00001,

      DEBUG_ONLY = 0b10000,
      INFO_ONLY  = 0b01000,
      WARN_ONLY  = 0b00100,
      ERROR_ONLY = 0b00010,
      FATAL_ONLY = 0b00001,
    };
    // clang-format on
  };

  /**
   * @brief Set the output level of the log
   */
  static void
  setLevel (l4_uint8_t lvl)
  {
    _level.value = lvl;
  }

  /**
   * @brief Get the output log level
   */
  static l4_uint8_t
  getLevel ()
  {
    return _level.value;
  }

  /**
   * @brief Write a debug message to the log
   * Note: This method will print a line break per default!
   *
   * e.g.
   * @code{.cpp}
   * #include <l4/liblog/log>
   * log_debug("some debug %s", "message");
   * @endcode
   */
  static inline void
  debug (const std::string str, const std::source_location location
                                = std::source_location::current ())
  {
#ifndef NDEBUG
    print (MsgLevel::DEBUG, str, location);
#endif
  }

  /**
   * @brief Write an info message to the log
   * Note: This method will print a line break per default!
   *
   * e.g.
   * @code{.cpp}
   * #include <l4/liblog/log>
   * log_info("some info %s", "message");
   * @endcode
   */
  static inline void
  info (const std::string str,
        const std::source_location location = std::source_location::current ())
  {
#ifndef NDEBUG
    print (MsgLevel::INFO, str, location);
#endif
  }

  /**
   * @brief Write a warn message to the log
   * Note: This method will print a line break per default!
   *
   * e.g.
   * @code{.cpp}
   * #include <l4/liblog/log>
   * log_warn("some warn %s", "message");
   * @endcode
   */
  static inline void
  warn (const std::string str,
        const std::source_location location = std::source_location::current ())
  {
#ifndef NDEBUG
    print (MsgLevel::WARN, str, location);
#endif
  }

  /**
   * @brief Write an error message to the log
   * Note: This method will print a line break per default!
   *
   * e.g.
   * @code{.cpp}
   * #include <l4/liblog/log>
   * log_error("some error %s", "message");
   * @endcode
   */
  static inline void
  error (const std::string str, const std::source_location location
                                = std::source_location::current ())
  {
#ifndef NDEBUG
    print (MsgLevel::ERROR, str, location);
#endif
  }

  /**
   * @brief Write a fatal message to the log
   * Note: This method will print a line break per default!
   *
   * e.g.
   * @code{.cpp}
   * #include <l4/liblog/log>
   * log_fatal("some fatal %s", "message");
   * @endcode
   */
  static inline void
  fatal (const std::string str, const std::source_location location
                                = std::source_location::current ())
  {
#ifndef NDEBUG
    print (MsgLevel::FATAL, str, location);
#endif
  }

  /**
   * @brief The level of a specific Log message.
   *
   * The level should always have exactly one set bit.
   *
   * This enum will be used implicitly by the level-named
   * functions e.g. log_error, log_debug, etc.
   *
   */
  // clang-format off
  enum MsgLevel : l4_uint8_t
  {
    DEBUG = 0b10000,
    INFO  = 0b01000,
    WARN  = 0b00100,
    ERROR = 0b00010,
    FATAL = 0b00001,
  };
  // clang-format on

  /**
   * @brief Generalized print method
   *
   * This method will do the actual printing.
   * Note: This method will print a line break per default!
   *
   * @param msg_lvl   The level of the message.
   * @param file      The file of the caller. Generated with __FILE__
   * @param function  The function name of the caller. Generated with
   *                  __FUNCTION__
   * @param line      The line index of the caller. Generated with __LINE__
   * @param fmt       A format string.
   * @param args      The arguments for the format string.
   *
   * @return          The number of characters printed or a negative value if
   * an output error occurred.
   *
   * Even if args is a variadic argument template the function it still needs
   * to be defined in a header file, just like normal templates.
   */
  static void
  print (MsgLevel msg_lvl, const std::string msg,
          const std::source_location location)
  {
    if (not(msg_lvl & _level.value))
      return;

    auto &os = get_output (msg_lvl);

    std::time_t result = std::time (nullptr);
    os << std::asctime (std::localtime (&result));

    /* output the Level prefix */

    // clang-format off
    switch (msg_lvl)
      {
        case MsgLevel::DEBUG: os << "\033[34;1mDEBUG\033[0m"; break;
        case MsgLevel::INFO:  os << "\033[36;1mINFO \033[0m"; break;
        case MsgLevel::WARN:  os << "\033[33;1mWARN \033[0m"; break;
        case MsgLevel::ERROR: os << "\033[31;1mERROR\033[0m"; break;
        case MsgLevel::FATAL: os << "\033[35;1mFATAL\033[0m"; break;
      }
    // clang-format on

    /* output the package name */
    const char *const name = getenv ("PKGNAME");
    if (name == NULL)
      return;
    os << name;


    /* print file name */
    os << "\033[2m<" << location.file_name() << ":" << location.line() << ">\033[0m";

    os << "\033[2m" << location.function_name() << ":\033[0m";

    os << msg << std::endl;
  }

  /**
   * @brief Helper method to log Exceptions
   *
   * This method will be called when there is only an exception
   * given to the log function.
   *
   * Example:
   * @code{.cpp}
   * try
   *   {
   *    // anything ...
   *   }
   *  catch (L4::Base_exception &exc)
   *   {
   *     log_fatal(exc);
   *   }
   * @endcode
   *
   * All argument are just passed to the general Log::print
   */
  // static int
  // print (MsgLevel msg_lvl, char const *const file, char const *const
  // function,
  //         const int line, L4::Base_exception &exception)
  // {
  //   return print (msg_lvl, file, function, line, "%s", exception.str ());
  // }

  /**
   * @brief Helper method to log Runtime_error
   *
   * This method will be called for Runtime_errors in contrast to the
   * Base_exception logger it will also print the "extra_str" of the
   * given error.
   *
   * Example:
   * @code{.cpp}
   * try
   *   {
   *    // anything ...
   *   }
   * catch (L4::Runtime_error &exc)
   *   {
   *     log_fatal(exc);
   *   }
   * @endcode
   */
  // static int
  // print (MsgLevel msg_lvl, char const *const file, char const *const
  // function,
  //         const int line, L4::Runtime_error &exception)
  // {
  //   return print (msg_lvl, file, function, line, "%s: %s", exception.str
  //   (),
  //                  exception.extra_str ());
  // }

private:
  /**
   * @brief Print the level prefix
   *
   * The prefix indicates which level the message
   * has.
   *
   * @param msg_lvl The level of the message
   * @param output The FILE* to write to
   *
   * @return The number of characters printed or a negative value if an output
   * error occurred.
   */
  static int put_severity (MsgLevel msg_lvl, FILE *output);

  /**
   * @brief Print a prefix showing the time of the message
   *
   * Print the current timestamp into the log
   *
   * @param output The FILE* to write to
   *
   * @return The number of characters printed or a negative value if an output
   * error occurred.
   */
  static int put_time (FILE *output);

  /**
   * @brief Print a prefix with the name of the package
   *
   * The name of the package will be loaded from the PKGNAME
   * environment variable.
   *
   * @return The number of characters printed or a negative value if an output
   * error occurred.
   * @return -L4_ENOENT if PKGNAME was not set
   */
  static int put_pkgname (FILE *output);

private:
  /**
   * @brief The current log output level.
   *
   * This will select which messages are silenced and
   * which are written to the output.
   *
   * \see #setLevel #getLevel
   */
  static Level _level;

  /**
   * @brief Get the output std::ostream-object
   *
   * @param msg_lvl  The level that will be printed
   * @return std::clog  if level is INFO or DEBUG
   * @return std::cerr  if level if WARN or higher
   */
  static std::ostream &
  get_output (MsgLevel msg_lvl)
  {
    if (msg_lvl & Level::WARN) // warn or higher
      return std::cerr;
    else
      return std::clog;
  }
};
}
}

#else

#error "This interface only works with c++20 - have a look at the docs"

#endif