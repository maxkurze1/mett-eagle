// -*- Mode: C++ -*-
// vim:ft=cpp
/**
 * (c) 2023 Max Kurze <max.kurze@mailbox.tu-dresden.de>
 *
 * This file is distributed under the terms of the
 * GNU General Public License 2.
 * Please see the COPYING-GPL-2 file for details.
 */
/**
 * @file
 * This file provides an exception class with special
 * logging functionality.
 *
 * @headerfile {l4/liblog/log}
 */

#pragma once

#include <cstdio>
#include <cstdlib>
#include <l4/cxx/exceptions>
#include <tuple>

namespace L4Re
{

namespace LibLog
{

/**
 * @brief A base class to for catching all templates of Loggable_exception
 *
 * This class can be used to catch all possible template implementations of the
 * Loggable_exception class.
 */
class Loggable_base_exception : public L4::Base_exception
{
protected:
  char *_msg = NULL;
  const long _errno;
  const char *_file = NULL;
  const char *_function = NULL;
  const int _line = -1;

  Loggable_base_exception (long err_no, const char *file, const char *func,
                           int line)
      : _errno (err_no), _file (file), _function (func), _line (line)
  {
  }

public:
  inline char const *
  str () const noexcept override
  {
    return l4sys_errtostr (_errno);
  }

  /**
   * @brief Get the message of this runtime error.
   */
  inline char const *
  msg () const noexcept
  {
    return _msg;
  }

  /**
   * @brief Get the error value for this runtime error.
   */
  inline long
  err_no () const noexcept
  {
    return _errno;
  }

  /**
   * @brief The name of the file that threw the error
   */
  inline char const *
  file () const noexcept
  {
    return _file;
  }

  /**
   * @brief The name of the function that threw the error
   */
  inline char const *
  function () const noexcept
  {
    return _function;
  }

  /**
   * @brief The line of the file that threw the error
   */
  inline int
  line () const noexcept
  {
    return _line;
  }
};

/**
 * @brief An exception class with special logging functionalities
 *
 * This class provides the ability to pass a c-like format string and arguments
 * to an exception.
 *
 * It also provides a helper macro to track the location that threw the error.
 * These information will be used automatically by the logging functions.
 *
 * @note Use the Loggable_base_exception class for catch blocks
 *
 * Example:
 * @code{.cpp}
 * #include <l4/liblog/log>
 * #include <l4/liblog/loggable-exception>
 *
 * using L4Re::LibLog::Loggable_exception;
 *
 * void function(const char *name)
 * {
 *   if (...)
 *     throw Loggable_exception(-L4_EINVAL,"Bad name '%s'", name);
 * }
 *
 * try
 * {
 *   function(...);
 * }
 * catch (L4Re::LibLog::Loggable_base_exception &e)
 * {
 *   L4Re::LibLog::Log::fatal {e};
 * }
 * @endcode
 */
template <typename... Args>
class Loggable_exception : public Loggable_base_exception
{

public:
  /**
   * Create a loggable exception from a format string.
   */
  explicit inline Loggable_exception (
      long err_no, char const *const fmt = NULL, Args... args,
      char const *const file = __builtin_FILE (),
      char const *const func = __builtin_FUNCTION (),
      const int line = __builtin_LINE ()) noexcept
      : Loggable_base_exception (err_no, file, func, line)
  {
    if (fmt == NULL)
      return;
    asprintf (&_msg, fmt, args...);
  }
  /**
   * Destructor has to free the message of the exception
   */
  ~Loggable_exception () noexcept { free (_msg); }
};

/**
 * User-defined deduction guide
 * https://en.cppreference.com/w/cpp/language/class_template_argument_deduction
 *
 * This will cause the Args template to match all the passed parameter classes.
 * Thus the constructor will also expect them as 'args'and use the default
 * values for the filename, function name and line number.
 */
template <typename... Args>
explicit Loggable_exception (long err_no, const char *fmt, Args... args)
    -> Loggable_exception<Args...>;

}

}