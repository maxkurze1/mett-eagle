// -*- Mode: C++ -*-
// vim:ft=cpp
/**
 * (c) 2023 Max Kurze <max.kurze@mailbox.tu-dresden.de>
 *
 * This file is distributed under the terms of the
 * GNU General Public License 2.
 * Please see the LICENSE.md file for details.
 */
/**
 * @file
 * This file provides an exception class with special
 * logging functionality.
 *
 * @headerfile {l4/liblog/log}
 */

#pragma once

#include <cstdio>
#include <cstdlib>
#include <l4/cxx/exceptions>
#include <string>
#include <utility>

#include <l4/fmt/core.h>

#include <l4/liblog/arg_with_location>

namespace L4Re
{
namespace LibLog
{

/**
 * @brief An exception class with special logging functionalities
 *
 * This class provides the ability to pass a c-like format string and arguments
 * to an exception.
 *
 * It also provides a helper macro to track the location that threw the error.
 * These information will be used automatically by the logging functions.
 *
 * @note Use the Loggable_base_exception class for catch blocks
 *
 * Example:
 * @code{.cpp}
 * #include <l4/liblog/log>
 * #include <l4/liblog/loggable-exception>
 *
 * using L4Re::LibLog::Loggable_exception;
 *
 * void function(const char *name)
 * {
 *   if (...)
 *     throw Loggable_exception(-L4_EINVAL,"Bad name '%s'", name);
 * }
 *
 * try
 * {
 *   function(...);
 * }
 * catch (L4Re::LibLog::Loggable_base_exception &e)
 * {
 *   L4Re::LibLog::Log::fatal {e};
 * }
 * @endcode
 */
class Loggable_exception : public L4::Base_exception
{
protected:
  std::string _msg;
  ArgWithLocation<const long> _errno;

public:
  /**
   * Create a loggable exception from a format string with arguments
   */
  template <typename... Args>
  explicit inline Loggable_exception (ArgWithLocation<const long> err_no,
                                      std::string msg = {}, Args &&...args) noexcept
      : _msg (fmt::format(msg, args...)),
        _errno (std::move(err_no) )
  {
  }

  inline char const *
  str () const noexcept override
  {
    return l4sys_errtostr (_errno.argument);
  }

  /**
   * @brief Get the message of this runtime error.
   */
  inline char const *
  msg () const noexcept
  {
    return _msg.c_str ();
  }

  /**
   * @brief Get the error value for this runtime error.
   */
  inline long
  err_no () const noexcept
  {
    return _errno.argument;
  }

  /**
   * @brief The name of the file that threw the error
   */
  inline char const *
  file () const noexcept
  {
    return _errno.file;
  }

  /**
   * @brief The name of the function that threw the error
   */
  inline char const *
  function () const noexcept
  {
    return _errno.function;
  }

  /**
   * @brief The line of the file that threw the error
   */
  inline int
  line () const noexcept
  {
    return _errno.line;
  }
};

} // ns LibLog
} // ns L4Re

/**
 * @brief Custom formatter for Loggable_exceptions
 *
 * \see https://fmt.dev/latest/api.html#formatting-user-defined-types
 */
template <> struct fmt::formatter<L4Re::LibLog::Loggable_exception>
{
  constexpr auto
  parse (format_parse_context &ctx) -> format_parse_context::iterator
  {
    return ctx.end ();
  }
  auto
  format (const L4Re::LibLog::Loggable_exception &exc,
          format_context &ctx) const -> format_context::iterator
  {
    return fmt::format_to (ctx.out (), "{:s}: {:s}", exc.str (), exc.msg ());
  }
};

/**
 * @brief Custom formatter for L4::Base_exception
 *
 * \see https://fmt.dev/latest/api.html#formatting-user-defined-types
 */
template <> struct fmt::formatter<L4::Base_exception>
{
  constexpr auto
  parse (format_parse_context &ctx) -> format_parse_context::iterator
  {
    return ctx.end ();
  }
  auto
  format (const L4::Base_exception &exc, format_context &ctx) const
      -> format_context::iterator
  {
    return fmt::format_to (ctx.out (), "{:s}", exc.str ());
  }
};

/**
 * @brief Custom formatter for L4::Runtime_error
 *
 * \see https://fmt.dev/latest/api.html#formatting-user-defined-types
 */
template <> struct fmt::formatter<L4::Runtime_error>
{
  constexpr auto
  parse (format_parse_context &ctx) -> format_parse_context::iterator
  {
    return ctx.end ();
  }
  auto
  format (const L4::Runtime_error &exc, format_context &ctx) const
      -> format_context::iterator
  {
    return fmt::format_to (ctx.out (), "{:s}: {:s}", exc.str (),
                           exc.extra_str ());
  }
};