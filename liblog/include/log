// -*- Mode: C++ -*-
// vim:ft=cpp
/**
 * (c) 2023 Max Kurze <max.kurze@mailbox.tu-dresden.de>
 *
 * This file is distributed under the terms of the
 * GNU General Public License 2.
 * Please see the LICENSE.md file for details.
 */
/**
 * @file
 * This library provides some logging utilities.
 *
 * @headerfile {l4/liblog/log}
 */
// TODO handle loggable_exception #ifdef __EXCEPTIONS

#pragma once

#include <chrono>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <iomanip>
#include <iostream>
#include <sstream>
#include <stdexcept>
#include <string>
#include <thread>
#include <tuple>

#include <l4/fmt/chrono.h> // formatting of std::chrono
#include <l4/fmt/core.h>
#include <l4/fmt/std.h> // formatting of std::thread::id

// #include <l4/cxx/exceptions>
// #include <l4/liblog/loggable-exception>
#include <l4/re/env>
// #include <l4/re/error_helper>
// #include <l4/sys/err.h>
#include <l4/sys/semaphore>

#include <l4/liblog/arg_with_location>

namespace L4Re
{

namespace LibLog
{
/**
 * @brief The output level of the Log
 *
 * This level will control which log messages are written
 * to the ouput and which will silently return.
 *
 * @note the default Level will be INFO
 *
 * @note the level will only be saved inside the environment variable
 *       'LOG_LEVEL'
 *
 * A level will by default also activate all higher levels.
 * the versions prefixed with _ONLY can be used to construct
 * a specific combination.
 *
 * For example:
 * @code{.cpp}
 * L4Re::LibLog::setLevel(L4Re::LibLog::Level::WARN);
 * // all messages with warn or higher
 * // -> warn, error, fatal
 *
 * L4Re::LibLog::setLevel(L4Re::LibLog::Level::DEBUG_ONLY |
 *   L4Re::LibLog::Level::ERROR_ONLY);
 * // only debug and error messages.
 * @endcode
 */
// class Level
// {
// public:
//   // clang-format off
//   enum : l4_uint8_t
//   {
//     DEBUG =      0b11111,
//     INFO  =      0b01111,
//     WARN  =      0b00111,
//     ERROR =      0b00011,
//     FATAL =      0b00001,

//     DEBUG_ONLY = 0b10000,
//     INFO_ONLY  = 0b01000,
//     WARN_ONLY  = 0b00100,
//     ERROR_ONLY = 0b00010,
//     FATAL_ONLY = 0b00001,
//   };
//   // clang-format on
// };

// clang-format off
struct DEBUG { static constexpr const char *name = "\033[34;1mDEBUG\033[0m"; };
struct INFO  { static constexpr const char *name = "\033[36;1mINFO \033[0m"; };
struct WARN  { static constexpr const char *name = "\033[33;1mWARN \033[0m"; };
struct ERROR { static constexpr const char *name = "\033[31;1mERROR\033[0m"; };
struct FATAL { static constexpr const char *name = "\033[35;1mFATAL\033[0m"; };
// clang-format on

/**
 * @brief Synchronizer that synchronizes nothing
 *
 * Just ignore the start and end
 */
struct NoSync
{
  void
  start ()
  {
  }
  void
  end ()
  {
  }
};

//TODO somehow pass cap_name as template param

/**
 * @brief Synchronization on a shared semaphore
 *
 * In oder for this to work, the processes that want to synchronize their
 * messages need to share a semaphore under a common name. This needs to be
 * setup in advance, which can be established with ned for example.
 *
 * Note: the semaphore needs to be initialized with '1'.
 */
struct SemaphoreSync
{
  L4::Cap<L4::Semaphore> sema
      = Env::env ()->get_cap<L4::Semaphore> ("log_sync");
  l4_umword_t store;

  void
  start ()
  {
    store = l4_utcb_mr ()->mr[0]; // sema->down will change the first mr
    if (sema.is_valid ())
      sema->down ();
  }
  void
  end ()
  {
    if (sema.is_valid ())
      sema->up ();
    l4_utcb_mr ()->mr[0] = store;
  }
};

/**
 * @brief Silencer that will silence nothing
 *
 * Ignore the environment, just print every message
 */
struct NoSilence
{
  static constexpr bool
  silence ()
  {
    return false;
  };

  static void setLevel (int /* log_level */){};

  static int
  getLevel ()
  {
    return ~0;
  };
};


// TODO somehow pass "LOG_LEVEL" as template param?
/**
 * @brief Use an environment env to decide which msg to silence
 *
 * The content of the env var "LOG_LEVEL" will be used
 */
struct SilenceByEnv
{
  template <typename Severity>
  static bool
  silence ()
  {
    return not(getLevel () & severity_to_mask<Severity> ());
  };

  static void
  setLevel (int log_level)
  {
    setenv ("LOG_LEVEL", std::to_string (log_level).c_str (), true);
  };

  static int
  getLevel ()
  {
    return atoi (getenv ("LOG_LEVEL") ?: "0");
  };

  template <typename Severity>
  static constexpr int
  severity_to_mask ()
  {
    return 0b0;
  }
};

// clang-format off
template <> constexpr int SilenceByEnv::severity_to_mask<DEBUG>() { return 0b10000; }
template <> constexpr int SilenceByEnv::severity_to_mask<INFO >() { return 0b01000; }
template <> constexpr int SilenceByEnv::severity_to_mask<WARN >() { return 0b00100; }
template <> constexpr int SilenceByEnv::severity_to_mask<ERROR>() { return 0b00010; }
template <> constexpr int SilenceByEnv::severity_to_mask<FATAL>() { return 0b00001; }
// clang-format on

/**
 * @brief More verbose format
 *
 * This format also includes thread_id, file name, function name and line.
 * Compared to CleanFormat.
 */
struct VerboseFormat
{
  static constexpr const char *format
      = "\033[2m{thread_id:>10} {time:%T}\033[0m {severity:s} {pkgname:s} "
        "\033[2m<{file:s}:{line:d}> {function:s}\033[0m {msg:s}\n";
};

/**
 * @brief Simple format as good default
 *
 * A format that includes the current time, message severity, pkgname and
 * message
 */
struct CleanFormat
{
  static constexpr const char *format
      = "\033[2m{time:%S}\033[0m {severity:s} {pkgname:s} {msg:s}\n";
};

/**
 * @brief main logging method
 *
 * This method will do the actual printing.
 * Note: This method will print a line break per default!
 *
 * @param format  Format string + source location (auto converted from
 *                string)
 * @param args    The arguments for the format string.
 *
 * @tparam Severity        Log level of the message
 * @tparam Silencer        Decides which message will be printed
 * @tparam Synchronizer    Can be used to sync messages of multiple processes
 * @tparam FormatSpecifier The format of the printed messages
 */
template <typename Severity, typename Silencer = SilenceByEnv, // TODO NoSilence as default?
          typename Synchronizer = SemaphoreSync, // TODO NoSync as default?
          typename FormatSpecifier = CleanFormat, typename... Args>
inline static void
log (ArgWithLocation<const char *> format, Args &&...args)
{
#ifndef NDEBUG
  /* log becomes a noop when debugging is disabled */

  /* check if message should be silenced */
  if (Silencer::template silence<Severity> ())
    return;

  auto now = std::chrono::time_point_cast<std::chrono::microseconds> (
      std::chrono::high_resolution_clock::now ());
  auto t_id = std::this_thread::get_id ();

  // necessary for the ""_a literals for named format args
  using namespace fmt::literals;

  // clang-format off
  std::string out_string = fmt::format (
      FormatSpecifier::format,
      "thread_id"_a = t_id,
      "time"_a = now,
      "severity"_a = Severity::name,
      "pkgname"_a = getenv ("PKGNAME") ?: "",
      "file"_a = format.file + std::string (format.file).find_last_of('/') + 1,
      "line"_a = format.line,
      "function"_a = format.function,
      "msg"_a = fmt::format(format.argument, args...));
  // clang-format on
  // TODO use strrchr instead of find last

  /**
   * Call print only once with the whole string.
   *
   * This will at least try to print strings with a single ipc call to prevent
   * multiple concurrently running threads from interleaving their messages.
   *
   * TODO they are interleaved in the middle of chars anyway .. why?
   */
  Synchronizer sync;
  sync.start ();

  L4Re::Env::env ()->log ()->print (out_string.c_str ());

  sync.end ();

#endif
}

/**
 * @brief Get the output log level
 */
template <typename Silencer = SilenceByEnv>
inline static int
getLevel ()
{
  return Silencer::getLevel ();
}

/**
 * @brief Set the output level of the log
 */
template <typename Silencer = SilenceByEnv>
inline static void
setLevel (int log_level)
{
  Silencer::setLevel (log_level);
}

} // namespace LibLog

} // namespace L4Re